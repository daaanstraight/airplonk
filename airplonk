#!/bin/bash
#
#  Push your current directory to SSH-able nodes in your local net.
#
#  Copyright (C) 2021 Daniel Gomes-Sebastiao
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

declare -r TITLE="AirPlonk"
declare -r VERSION=1.0.2
declare -r REVISION_DATE="November 2021"
declare -r -a LINUX_DEPENDENCIES=("arp" "awk" "clear" "grep" "hostname" "nmap"\
                                  "printf" "rsync" "sed" "sleep" "stty" "tput"\
																	"unbuffer" "xargs" "xdg-open")
declare -r -a MACOS_DEPENDENCIES=("arp" "awk" "clear" "grep" "ifconfig" "nmap"\
                                  "open" "printf" "rsync" "sed" "sleep" "stty"\
                                  "tput" "unbuffer" "xargs")

declare ARG             # Optional arg value from runtime.
declare -a NAMES=()     # Discovered hostnames.
declare -a IPS=()       # Discovered IP addresses.
declare HOST_IP         # Host IP address.
declare TARGET_NODE     # An indice, representing the target node.
declare -i ERR_COUNT=0  # Number of times 0 nodes where discovered.
declare -i SPINNER_PID  # PID of the 'looking for nodes...' spinner process.
declare -i COLUMNS      # Number of columns of the terminal window. (declare
COLUMNS="$(tput cols)"  # and assign seperately to avoid masking return values)
declare os="$OSTYPE"    # Determine environment.
declare -i PORT
PORT=22                 # Set port to 22 by default

# Begin logic
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
################################################################################
# Determine missing dependencies.
# Globals:
#   None
# Arguments:
#   An array of dependencies according to the detected OS.
# Outputs:
#   Lists missing dependencies to stdout.
################################################################################
function check_dependencies() {
	local dependencies=("$@")
	local missing_dependencies=()
  for dependency in ${dependencies[*]}; do
    if ! [[ $(which "$dependency" 2>/dev/null) ]]; then
			missing_dependencies+=("${dependency}")
		fi
  done

	if [[ "${missing_dependencies[*]}" != "" ]]; then
		printf "You are missing the following dependencies: \n"
    for missing_dependency in ${missing_dependencies[*]}; do
	    printf -- " - %s\n" "$missing_dependency"
		done
		printf "\nPlease install them to use AirPlonk."
		exit
	fi

  if [[ $(which "rsync" 2>/dev/null) ]]; then
    local rsync_version
    rsync_version=$(rsync --version | grep version | awk '{print $3}')
    local rsync_major
    rsync_major=$(printf "%s" "$rsync_version" | cut -c1-3 | cut -c1-1)
    local rsync_minor="${rsync_major: -1}"
    if [[ $rsync_major -ge 3 ]]; then
      if [[ $rsync_minor -le 1 ]]; then
        printf "You are using rsync version%s\n" "$rsync_version"
        printf "Please upgrade to rsync version 3.1 or higher to use AirPlonk."
        exit
      fi
    else
      printf "You are using rsync version%s\n" "$rsync_version"
      printf "Please upgrade to rsync version 3.1 or higher to use AirPlonk."
      exit
    fi
  fi
}

################################################################################
# Get the IP of the local host.
# Globals:
#   HOST_IP
# Arguments:
#   None
################################################################################
function get_host_ip() {
  if [[ $OS == 'gnu' ]]; then
    HOST_IP="$(hostname -I | awk '{print $1}')"
  elif [[ $OS == 'android-linux' ]]; then
    HOST_IP=$(ip addr show wlan0 \ 
        | grep inet \
        | grep -v inet6\ 
        | awk '{print $2}' \ 
        | awk '{split($0,a,"/"); print a[1]}')
  else
    HOST_IP=$(ifconfig 2>/dev/null \
           | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' \
           | grep -Eo '([0-9]*\.){3}[0-9]*' \
           | grep -v '127.0.0.1')

  fi
}

################################################################################
# Search for nodes on the local net that have port 22 open using nmap and
# parse the output.
# Globals:
#   NAMES
#   IPS
#   SPINNER_PID
# Arguments:
#   None
# Outputs:
#   Lists node names and their IP's to stdout.
################################################################################
function find_nodes() {
	# Get local ip everytime. (in case of switching networks)
	get_host_ip
  # Provide some feedback during the net scan process.
  scan_spin &
  # Store the PID of the previous command. (scan_spin)
  SPINNER_PID=$!
  # Execute the net scan and populate arrays.
  while IFS= read -r line; do
		name="$(printf "%s\n" "${line}" | awk '{print $3}')"
		name="${name:1:${#name}-2}"
		ip="$(printf "%s\n" "${line}" | awk '{print $2}')"
		# If nmap cannot resolve a hostname,
		if [[ "${name}" == "" ]] && [[ "${ip}" != "" ]]; then
			# try find it with arp.
			name="$(arp "${ip}" | awk '{print $1}' | tr -d '\n')"
			name=${name#"Address"}
		fi
		IPS+=("${ip}")
		NAMES+=("${name}")
  done < <(nmap -p "${PORT}" -oG - "${HOST_IP}"/24 2>/dev/null | grep "${PORT}"/open)

  kill $SPINNER_PID
	# Supress stderr termination notification.
	wait $SPINNER_PID 2>/dev/null;
	printf "\n\n"
	for (( i=0; i<"${#IPS[@]}"; i++ )); do
		printf "%s\n" "$((i+1)). ${NAMES[i]} ${IPS[i]}"
	done

	choose_target
}

################################################################################
# Prompt the user to select a target node.
# Globals:
#   NAMES
#   IPS
#   TARGET_NODE
# Arguments:
#   None
# Output:
#   Writes the 'choose-node' and 'look-again' prompts to stdout.
# Input:
#  Reads the user's decision from stdin.
################################################################################
function choose_target() {
	# If no nodes were detected...
  if [[ "${NAMES[*]}" == "" ]] && [[ "${IPS[*]}" == "" ]]; then
	  ERR_COUNT=$((ERR_COUNT+1))
		while true; do
			if [[ $ERR_COUNT -gt 3 ]]; then
				printf "No nodes found :( (try run 'airplonk -t' for more) \n\n"
			else
				printf "No nodes found :( \n\n";
			fi
			printf "Look again? (y/n) >>> "
			read -r look_again;

			if [[ "${look_again}" == "y" ]] \
			|| [[ "${look_again}" == "Y" ]] 2>/dev/null; then
				# Reset $look_again for the child function call
				look_again=""
				refresh
				find_nodes
				return 0
			fi

			if [[ "${look_again}" == "n" ]] || [[ "${look_again}" == "N" ]] 2>/dev/null; then
				abrupt_exit
				exit
			fi

			blink_look_again
		done

  else
		# Some nodes were detected...
		printf "\n"
    while true;
	  do
		  printf "Choose a target node (number)\n"
		  printf ", or look again? (y/n) >>> "
		  read -r TARGET_NODE;

		  if [[ "${TARGET_NODE}" == "y" ]] || [[ "${TARGET_NODE}" == "Y" ]]; then
			  refresh
			  # (findNodes calls chooseNodes)
			  find_nodes
			  # Abandon the rest of the logic for the this function call.
			  return
		  fi

		  if [[ "${TARGET_NODE}" == "n" ]] || [[ "${TARGET_NODE}" == "N" ]]; then
				abrupt_exit
			  exit
		  fi

		  if [[ "${TARGET_NODE}" =~ ^[0-9]+$ ]]; then
				# If input is in range of the listed nodes...
        if [[ "${TARGET_NODE}" -gt 0 ]] \
				&& [[ "${TARGET_NODE}" -lt $((${#NAMES[@]} + 1)) ]] 2>/dev/null; then
					  break
				fi
		  fi

			blink_choose_target
		done
	fi
}

################################################################################
# Push the current working directory to the target node.
# Globals:
#   NAMES
#		IPS
#		TARGET_NODE
# Arguments:
#   None
# Output:
#   Prompts for username and password in stdout.
# Input:
#   Reads username and password for the target node  from stdin.
################################################################################
function transmit() {
	printf "\n"
  current_dir="$PWD"
  local timestamp
  timestamp="$(date +"%D" | sed 's/^\///;s/\//-/g') $(date +"%T")"
  local destination="${current_dir##*/} $timestamp"
  destination=$(printf "%s" "$destination" | sed 's/ /\\ /g')
	printf "Enter your username @%s" "${NAMES[$((TARGET_NODE - 1))]} >>> "
	read -r username; printf "\n"
	rsync -aP -e "ssh -p $PORT" --rsync-path="mkdir -p /$HOME/AirPlonks/ && rsync" "${current_dir}"/ \

   "${username}"@"${IPS[$((TARGET_NODE - 1))]}":/$HOME/AirPlonks/"${destination}" \
	  | unbuffer -p grep -o "[0-9]*%" | xargs -I{} printf "%s\rPlonking: " "{}"
}

function transmit() {
    printf "\n"
    current_dir="$PWD"
    local timestamp
    timestamp="$(date +"%D" | sed 's/^\///;s/\//-/g') $(date +"%T")"
    local destination="${current_dir##*/} $timestamp"
    destination=$(printf "%s" "$destination" | sed 's/ /\\ /g')
    printf "Enter your username @%s" "${NAMES[$((TARGET_NODE - 1))]} >>> " 
    read -r username; printf "\n"
    rsync -a -e "ssh -p $PORT" --rsync-path="mkdir -p ~/AirPlonks/ && rsync" --info=progress2     "$PWD/"\
        "${username}"@"${IPS[$((TARGET_NODE - 1))]}":~/AirPlonks/"$destination"\
        | unbuffer -p grep -o "[0-9]*%" | xargs -I{} printf "%s\rPlonking: " "{}"
 }

################################################################################
# Handle unexpected script termination. (cntrl-c or similar)
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes help tip to stdout.
################################################################################
trap abrupt_exit SIGINT
function abrupt_exit() {
	printf "\nRun 'airplonk --help' for more."
	exit
}

################################################################################
# Clean up process before exit.
# Globals:
#   None
# Arguments:
#   None
################################################################################
trap exit_sequence EXIT
function exit_sequence() {
	# Re-enable return key in case script was killed before re-enabling it.
	stty -igncr 2>/dev/null;
	# Kill any unfinished spinners.
	kill "$SPINNER_PID" 2>/dev/null
	wait "$SPINNER_PID" 2>/dev/null;
	printf "\n\n"
	exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End logic


# Begin animation functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
################################################################################
# Clear n previous lines from the terminal display.
# Globals:
#   None
# Arguments:
#   Number of lines to clear.
################################################################################
function clear_n_lines() {
  for (( i=0; i<$1; i++ )); do
    printf "%b" "\e[A\e[2K"
  done
}

################################################################################
# Create a blinking effect for the 'look-again' prompt. (when no nodes are det-
# cted)
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes a series of 'look-again' prompts to stdout.
################################################################################
function blink_look_again() {
	# Ignore cursor movement by the return key.
	stty igncr

  clear_n_lines 3

	printf "No nodes found :( \n\n";
	printf "Look again? (y/n) >>> \n"
  sleep 0.1

  clear_n_lines 3

	printf "No nodes found :( \n\n";
	printf "Look again?       >>> \n"
	sleep 0.1

	clear_n_lines 3

	printf "No nodes found :( \n\n";
	printf "Look again? (y/n) >>> \n"
  sleep 0.1

  clear_n_lines 3

	printf "No nodes found :( \n\n";
	printf "Look again?       >>> \n"
  sleep 0.1

  clear_n_lines 3

	stty -igncr
}

################################################################################
# Create a blinking effect for the 'choose-target' prompt.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes a series of 'choose-target' prompts to stdout.
################################################################################
function blink_choose_target() {
	stty igncr

  clear_n_lines 2

	printf "Choose a target node (number)\n"
  printf ", or look again? (y/n) >>> \n"
  sleep 0.1

  clear_n_lines 2

	printf "Choose a target node         \n"
	printf ", or look again?       >>> \n"
  sleep 0.1

  clear_n_lines 2

	printf "Choose a target node (number)\n"
	printf ", or look again? (y/n) >>> \n"
  sleep 0.1

  clear_n_lines 2

	printf "Choose a target node         \n"
	printf ", or look again?       >>> \n"
  sleep 0.1

  clear_n_lines 2

	stty -igncr
}

################################################################################
# Spinner for whilst scanning nodes.
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes a spinner sequence to stdout.
################################################################################
function scan_spin() {
	spinner=( "Looking for nodes." "Looking for nodes.." "Looking for nodes...")
  while true; do
		for i in "${spinner[@]}"; do
			printf "\r%s" "$i"
			sleep 0.5
			printf "\033[2K"
		done
	done
}

################################################################################
# Display boot animation.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes small banner animation to stdout.
################################################################################
function small_banner() {
  clear
  if ! [[ "$ARG" == '-b' ]]; then
    stty igncr
    printf "\n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    #sleep .5
    clear
    printf "



       d8888 8888888b.
      d88888 888   Y88b
     d88P888 888    888
    d88P 888 888   d88P
   d88P  888 8888888P\"
  d88P   888 888
 d8888888888 888
d88P     888 888



"
    sleep .5
    clear
    printf "



       d8888 8888888b.
      d88888 888   Y88b
     d88P888 888    888
    d88P 888 888   d88P
   d88P  888 8888888P\"
  d88P   888 888        \e[34m.oxd;\e[0m
 d8888888888 888       \e[34m.Wl .Nl\e[0m
d88P     888 888        \e[34mdKxO0.\e[0m



"
    sleep .1
    clear
    printf "



       d8888 8888888b.
      d88888 888   Y88b
     d88P888 888    888  \e[34m.''.\e[0m
    d88P 888 888   d88P    \e[34m.:xOo.\e[0m
   d88P  888 8888888P\"         \e[34m;Kd\e[0m
  d88P   888 888        \e[34m.oxd;    xk\e[0m
 d8888888888 888       \e[34m.Wl .Nl    0\e[0m
d88P     888 888        \e[34mdKxO0.    .\e[0m



"
    sleep .1
    clear
    printf "



       d8888 8888888b.    \e[34m.';cldo,\e[0m
      d88888 888   Y88b         \e[34m.;k0:\e[0m
     d88P888 888    888  \e[34m.''.       lX:\e[0m
    d88P 888 888   d88P    \e[34m.:xOo.    .OO\e[0m
   d88P  888 8888888P\"         \e[34m;Kd     xx\e[0m
  d88P   888 888        \e[34m.oxd;    xk     K.\e[0m
 d8888888888 888       \e[34m.Wl .Nl    0     ;,\e[0m
d88P     888 888        \e[34mdKxO0.    .      .\e[0m



"
    sleep .1
    clear
    printf "
                          \e[34m..,;:cll;.
                                  'lkkc.
                                      ;OO,\e[0m
       d8888 8888888b.    \e[34m.';cldo,      .k0.\e[0m
      d88888 888   Y88b         \e[34m.;k0:     'Xl\e[0m
     d88P888 888    888  \e[34m.''.       lX:     0d\e[0m
    d88P 888 888   d88P    \e[34m.:xOo.    .OO     K;\e[0m
   d88P  888 8888888P\"         \e[34m;Kd     xx    .K\e[0m
  d88P   888 888        \e[34m.oxd;    xk     K.    x.\e[0m
 d8888888888 888       \e[34m.Wl .Nl    0     ;,    ,.\e[0m
d88P     888 888        \e[34mdKxO0.    .      .    .\e[0m



"
  sleep 1
  clear
  printf "
                          \e[34m..,;:cll;.
                                  'lkkc.
                                      ;OO,\e[0m
       d8888 8888888b.    \e[34m.';cldo,      .k0.\e[0m
      d88888 888   Y88b         \e[34m.;k0:     'Xl\e[0m
     d88P888 888    888  \e[34m.''.       lX:     0d\e[0m
    d88P 888 888   d88P    \e[34m.:xOo.    .OO     K;\e[0m
   d88P  888 8888888P\"         \e[34m;Kd     xx    .K\e[0m
  d88P   888 888        \e[34m.oxd;    xk     K.    x.\e[0m
 d8888888888 888       \e[34m.Wl .Nl    0     ;,    ,.\e[0m
d88P     888 888        \e[34mdKxO0.    .      .    .\e[0m

      [by https://github.com/gomesdigital]

"
  sleep 1
  stty -igncr
fi
}

################################################################################
# Clears the display without affecting the banner.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes banner (big or small) to stdout.
################################################################################
function refresh() {
	NAMES=()
	IPS=()
	clear
	if ! [[ "$ARG" == '-b' ]]; then
		stty igncr
		if [[ "$(tput cols)" -ge 48 ]]; then
    printf "
                          \e[34m..,;:cll;.
                                  'lkkc.
                                      ;OO,\e[0m
       d8888 8888888b.    \e[34m.';cldo,      .k0.\e[0m
      d88888 888   Y88b         \e[34m.;k0:     'Xl\e[0m
     d88P888 888    888  \e[34m.''.       lX:     0d\e[0m
    d88P 888 888   d88P    \e[34m.:xOo.    .OO     K;\e[0m
   d88P  888 8888888P\"         \e[34m;Kd     xx    .K\e[0m
  d88P   888 888        \e[34m.oxd;    xk     K.    x.\e[0m
 d8888888888 888       \e[34m.Wl .Nl    0     ;,    ,.\e[0m
d88P     888 888        \e[34mdKxO0.    .      .    .\e[0m

      [by https://github.com/gomesdigital]

"
    fi
  stty -igncr
fi
printf "Cargo directory: %s\n\n" "${PWD##*/}";
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End animation functions


# Begin manual
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
################################################################################
# Display help menu.
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes the help menu to stdout.
################################################################################
function help() {
	 clear
	 if [[ COLUMNS -gt 80 ]]; then
		 printf "%*s\n" $(( (${#TITLE} + 80) / 2 )) "$TITLE"
	else
		printf "%*s\n" $(( (${#TITLE} + 80) / 2 )) "$TITLE"
	 fi
	 printf "\n"
	 printf "\e[1mNAME\e[0m\n"
	 printf "       airplonk - a no-fuss file-sharing tool.\n\n"
	 printf "\e[1mDESCRIPTION\e[0m\n"
	 printf "       AirPlonk is a no-fuss way to push stuff to SSH-able nodes on your local\n"
	 printf "       network. It will push your current working directory into ~/AirPlonk on\n"
	 printf "       the target node.\n\n"
   usage
	 printf "\n\e[1mBUGS\e[0m\n"
	 printf "       See our issues on GitHub: "
   printf "https://github.com/gomesdigital/AirPlonk/issues\n\n"
	 printf "       If you have detected a bug, please open an issue on the GitHub page\n"
	 printf "       linked above.\n"
	 printf "\n\e[1mAUTHORS\e[0m\n"
	 printf "       AirPlonk was originally written by Daniel Gomes-Sebastiao and is\n"
	 printf "       currently maintained by Daniel Gomes-Sebastiao.\n\n"
	 printf "\e[1mCOPYRIGHT\e[0m\n"
	 printf "       AirPlonk Copyright (C) 2021 Daniel Gomes-Sebastiao\n"
	 printf "       AirPlonk comes with ABSOLUTELY NO WARRANTY. This is free software, and \n"
   printf "       you are welcome to redistribute it under certain conditions. See the GNU \n"
	 printf "       Licence for details.\n\n"
	 printf "       You should have received a copy of the GNU General Public License along \n"
	 printf "       with this program. If not, see <https://www.gnu.org/licenses/>.\n\n"
	 if [[ $COLUMNS -gt 80 ]]; then
		 printf "%*s" $(((${#REVISION_DATE} + 80) / 2)) "$REVISION_DATE"
	 else
 		 printf "%*s" $(((${#REVISION_DATE} + COLUMNS) / 2)) "$REVISION_DATE"
	 fi
}

################################################################################
# Display usage syntax.
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes syntax information to stdout.
##################### ###########################################################
function usage() {
	printf "\e[1mSYNOPSIS\e[0m\n"
	printf "       airplonk [OPTION]\n\n"
	printf "\e[1mOPTIONS\e[0m\n"
	printf "\e[1m-a\e[0m Search for non-root Android devices over port 8022.\n"
	printf "       \e[1m-b\e[0m  Run without banner.\n"
	printf "       \e[1m-h\e[0m  Print this help menu.\n"
	printf "       \e[1m-s\e[0m  Support me on github with a follow or star.\n"
	printf "       \e[1m-t\e[0m  Troubleshoot.\n"
	printf "       \e[1m-v\e[0m  See version info."
}

################################################################################
# Open the default browser to the author's landing page.
# Globals:
#   None
# Arguments:
#   None
################################################################################
function support() {
	printf "\nThank you for your support.\n\n"
	printf "Follow this link: https://github.com/gomesdigital\n"
	printf "to support me with a star/follow on github. \n\n"
	printf "Kind regards,\n"
	printf "Daniel Gomes-Sebastiao"
	# Termux and Linux
	if ! xdg-open "https://github.com/gomesdigital" 2>/dev/null; then
			# MacOS
      open "https://github.com/gomesdigital"
  fi
}

################################################################################
# Display a troubleshoot guide.
# Globals:
#   None
# Arguments:
#   None
# Output:
#   Writes the some troubleshooting tips to stdout.
################################################################################
function troubleshoot() {
	printf "\n"
	printf "Can't find any nodes...?\n"
	printf "It is likely that your target node is not running an SSH service.\n\n"
	printf "How to launch an SSH service differs from OS to OS:\n\n"
	printf " - MacOS: see https://support.apple.com/en-gb/guide/mac-help/mchlp1066/mac\n\n"
	printf " - Linux: see https://opensource.com/article/20/9/ssh\n\n"
	printf " - Windows 10: see https://www.howtogeek.com/336775/how-to-enable-and-use-windows-10s-built-in-ssh-commands/\n\n"
	printf "* On Windows 8 and below you will likely require a 3rd party SSH client,\n"
	printf "  like this one: https://www.putty.org/"
}

################################################################################
# Display semantic version.
# Globals:
#   VERSION
# Arguments:
#   None
################################################################################
function version() {
	printf "\nAirPlonk, version %s\n" "$VERSION"
	printf "Copyright (C) 2021 Daniel Gomes-Sebastiao\n\n"
	printf "AirPlonk comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n"
	printf "welcome to redistribute it under certain conditions. See the GNU General Public\n"
	printf "Licence for details."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End manual


function main() {
	# $1 must be stored gloablly for function 'refresh'.
  ARG="$1"
	if [[ "$1" ]]; then
	  case "$ARG" in
			"-h" | "--help")
			  help
				exit
				;;
			"-s")
			  support
				exit
				;;
			"-t")
			  troubleshoot
				exit
				;;
			"-v" | "--version")
			  version
				exit
				;;
			"-b")
			  :
				;;
                        "-a" | "--android")
			  PORT=8022
				;;
			*)
			  printf "\nairplonk: illegal option %s\n\n" "\'$ARG\'"
				usage
				exit
				;;
		esac
	fi

	if [[ "$COLUMNS" -ge 48 ]] && [[ $ARG != "-b" ]]; then
		small_banner
	fi

	local os="$OSTYPE"
  case "$os" in
		*"gnu"*)
      OS='gnu'
		  check_dependencies "${LINUX_DEPENDENCIES[*]}"
			;;
		*"darwin"*)
      OS='darwin'
		  check_dependencies "${MACOS_DEPENDENCIES[*]}"
			;;
		*"android"*)
		  check_dependencies "${LINUX_DEPENDENCIES[*]}"
		  ;;
	esac

	printf "Cargo directory: %s\n\n" "${PWD##*/}";
	find_nodes
	transmit
}

main "$@"
